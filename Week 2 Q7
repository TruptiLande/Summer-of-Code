def add_num(num, max_heap, min_heap):
        if len(max_heap) == 0 or num <= -max_heap[0]:
            heapq.heappush(max_heap, -num)
        else:
            heapq.heappush(min_heap, num)
        balance_heaps(max_heap, min_heap)

    def remove_num(num, max_heap, min_heap):
        if num <= -max_heap[0]:
            max_heap.remove(-num)
            heapq.heapify(max_heap)
        else:
            min_heap.remove(num)
            heapq.heapify(min_heap)
        balance_heaps(max_heap, min_heap)

    def balance_heaps(max_heap, min_heap):
        if len(max_heap) > len(min_heap) + 1:
            heapq.heappush(min_heap, -heapq.heappop(max_heap))
        elif len(min_heap) > len(max_heap):
            heapq.heappush(max_heap, -heapq.heappop(min_heap))

    result = []
    max_heap, min_heap = [], []

    for i in range(len(nums)):
        add_num(nums[i], max_heap, min_heap)
        if i >= k - 1:
            result.append(-max_heap[0])
            remove_num(nums[i - k + 1], max_heap, min_heap)

    return result

# Example usage
n = 8
k = 3
nums = [2, 4, 3, 5, 8, 1, 2, 1]
print(median_sliding_window(nums, k))  # Output: [3, 4, 5, 5, 2, 1]
