def count_substrings_with_k_ones(k, s):
    n = len(s)
    ones_positions = []

    # Collect the positions of all '1's in the string
    for i in range(n):
        if s[i] == '1':
            ones_positions.append(i)

    total_substrings = 0
    num_ones = len(ones_positions)
    
    if k == 0:
        # Count substrings with no '1's
        consecutive_zeros = 0
        for char in s:
            if char == '0':
                consecutive_zeros += 1
            else:
                total_substrings += (consecutive_zeros * (consecutive_zeros + 1)) // 2
                consecutive_zeros = 0
        total_substrings += (consecutive_zeros * (consecutive_zeros + 1)) // 2
    else:
        if num_ones < k:
            return 0
        
        for i in range(num_ones - k + 1):
            left_bound = ones_positions[i]
            right_bound = ones_positions[i + k - 1]
            
            left_zeros = left_bound - (ones_positions[i - 1] if i > 0 else -1)
            right_zeros = (ones_positions[i + k] if i + k < num_ones else n) - right_bound
            
            total_substrings += left_zeros * right_zeros
    
    return total_substrings

# Example usage
print(count_substrings_with_k_ones(1, "1010"))  # Output: 6
print(count_substrings_with_k_ones(2, "01010"))  # Output: 4
print(count_substrings_with_k_ones(100, "01010"))  # Output: 0

