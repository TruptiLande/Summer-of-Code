MOD = 998244353

def solve():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    index = 1
    
    results = []
    
    for _ in range(t):
        s = data[index]
        index += 1
        n = len(s)
        
        pattern1 = ''.join(['01'[(i % 2)] for i in range(n)])
        pattern2 = ''.join(['10'[(i % 2)] for i in range(n)])
        
        mismatch1 = sum(1 for i in range(n) if s[i] != pattern1[i])
        mismatch2 = sum(1 for i in range(n) if s[i] != pattern2[i])
        
        if mismatch1 < mismatch2:
            min_deletions = mismatch1
            # Count number of ways to get pattern1
            dp = [1] + [0] * n
            for i in range(n):
                if s[i] == pattern1[i]:
                    dp[i + 1] = dp[i]
                else:
                    dp[i + 1] = dp[i] + 1
            num_ways = pow(2, dp[-1] - 1, MOD)
        elif mismatch2 < mismatch1:
            min_deletions = mismatch2
            # Count number of ways to get pattern2
            dp = [1] + [0] * n
            for i in range(n):
                if s[i] == pattern2[i]:
                    dp[i + 1] = dp[i]
                else:
                    dp[i + 1] = dp[i] + 1
            num_ways = pow(2, dp[-1] - 1, MOD)
        else:
            min_deletions = mismatch1
            # Count number of ways to get both pattern1 and pattern2
            dp1 = [1] + [0] * n
            dp2 = [1] + [0] * n
            for i in range(n):
                if s[i] == pattern1[i]:
                    dp1[i + 1] = dp1[i]
                else:
                    dp1[i + 1] = dp1[i] + 1
                if s[i] == pattern2[i]:
                    dp2[i + 1] = dp2[i]
                else:
                    dp2[i + 1] = dp2[i] + 1
            num_ways1 = pow(2, dp1[-1] - 1, MOD)
            num_ways2 = pow(2, dp2[-1] - 1, MOD)
            num_ways = (num_ways1 + num_ways2) % MOD
        
        results.append(f"{min_deletions} {num_ways}")
    
    sys.stdout.write("\n".join(results) + "\n")

