def winning_position(board):
    n = 5
    dp = {}
    
    def get_mask(board):
        mask = 0
        for r in range(n):
            for c in range(n):
                if board[r][c] == 1:
                    mask |= (1 << (r * n + c))
        return mask
    
    def is_winning(mask):
        if mask in dp:
            return dp[mask]
        
        for i in range(n):
            for j in range(n):
                # Check if we can remove any number of pieces starting from (i, j)
                new_mask = mask
                for k in range(n):
                    if i < n and board[i][j] == 1:
                        new_mask &= ~(1 << (i * n + j))
                    if j < n and board[i][j] == 1:
                        new_mask &= ~(1 << (i * n + j))
                
                if new_mask != mask and not is_winning(new_mask):
                    dp[mask] = True
                    return True
        
        dp[mask] = False
        return False
    
    initial_mask = get_mask(board)
    return is_winning(initial_mask)

# Reading input
import sys
input = sys.stdin.read
data = input().splitlines()

n = int(data[0])
test_cases = []
index = 1

for _ in range(n):
    board = []
    for i in range(5):
        board.append(list(map(int, data[index].split())))
        index += 1
    test_cases.append(board)

# Processing each test case
results = []
for board in test_cases:
    if winning_position(board):
        results.append("winning")
    else:
        results.append("losing")

# Output results
for result in results:
    print(result)
